import java.util.*;

class Solution {
    public int solution(int[] A, int[] B, int[] C) {
        int n = A.length;
        int m = C.length;
        int[][] sortedNails = new int[m][2];

        for (int i=0; i < m; i++) {
            sortedNails[i][0] = C[i];
            sortedNails[i][1] = i;
        }
        Arrays.sort(sortedNails, (x, y) -> x[0] - y[0]);

        int res = 0;
        for (int i=0; i < n; i++) {
            res = findMinNailIndex(A[i], B[i], sortedNails, res);
            if (res == -1) return -1;
        }
        
        return res + 1;
    }

    private int findMinNailIndex(int start, int end, int[][] nails, int lastMIn) {
        int mid = 0;
        int minIndex = 0;
        int maxIndex = nails.length - 1;
        int res = -1;
        while(minIndex <= maxIndex) {
            mid = (minIndex + maxIndex) / 2;
            if (nails[mid][0] < start) {
                minIndex = mid + 1;
            } else if (nails[mid][0] > end) {
                maxIndex = mid - 1;
            } else {
                res = mid;
                maxIndex = mid - 1;
            }
        }
        if (res == -1) return -1;
        
        int minOriginalIndex = nails[res][1];
        for (int j=res; j < nails.length ; j++) {
            if (nails[j][0] > end) break;
            minOriginalIndex = Math.min(minOriginalIndex, nails[j][1]);

            if (minOriginalIndex <= lastMIn) return lastMIn;
        }
        
        return minOriginalIndex;
    }
}